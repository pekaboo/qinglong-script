# Encoding: utf-8
import math


areaMap = { 
    "A": ["Адлер", "Альметьевск", "Анапа", "Армавир", "Астрахань", "Балаково", "Белгород", "Березники", "Брянск", "Великий Новгород", "Владикавказ", "Владимир", "Волгоград", "Волгодонск", "Волжский", "Вологда", "Воронеж", "Выборг", "Грозный", "Дербент", "Егорьевск", "Йошкар-Ола", "Казань", "Калуга", "Киров", "Клин", "Кострома", "Краснодар", "Курск", "Лаговское", "Липецк", "Майкоп", "Махачкала", "Москва", "Набережные Челны", "Назрань", "Нальчик", "Нижнекамск", "Нижний Новгород", "Новороссийск", "Новочеркасск", "Ногинск", "Обнинск", "Орёл", "Оренбург", "Орск", "Пенза", "Пермь", "Петрозаводск", "Псков", "Пятигорск", "Ростов-на-Дону", "Рыбинск", "Рязань", "Самара", "Санкт-Петербург", "Саранск", "Саратов", "Сызрань", "Таганрог", "Тамбов", "Тверь", "Тольятти", "Ульяновск", "Уфа", "Чебоксары", "Череповец", "Черкесск", "Шахты", "Элиста", "Энгельс", "Ярославль"],
    "B": ["Архангельск", "Барановичи", "Бобруйск", "Борисов", "Брест", "Витебск", "Екатеринбург", "Гомель", "Гродно", "Каменск-Уральский", "Лида", "Минск", "Могилев", "Мозырь", "Молодечно", "Мурманск", "Новый Уренгой", "Орша", "Пинск", "Полоцк", "Севастополь", "Северодвинск", "Симферополь", "Солигорск", "Сыктывкар", "Тюмень", "Ухта", "Челябинск"],
    "C": ["Абакан", "Барнаул", "Бийск", "Братск", "Горно-Алтайск", "Железногорск", "Иркутск", "Кемерово", "Кызыл", "Нерюнгри", "Нижневартовск", "Новокузнецк", "Новосибирск", "Ноябрьск", "Омск", "Рубцовск", "Северск", "Томск", "Ханты-Мансийск", "Улан-Удэ"],
    "D": ["Биробиджан", "Благовещенск", "Владивосток", "Воркута", "Комсомольск-на-Амуре", "Находка", "Лабытнанги", "Нерюнгри", "Нефтеюганск", "Печора", "Салехард", "Усинск", "Уссурийск", "Хабаровск", "Чита"],
    "E": ["Актау", "Актобе", "Алматы", "Астана", "Атырау", "Балхаш", "Жезказган", "Караганда", "Кокшетау", "Костанай", "Павлодар", "Петропавловск", "Семей", "Талдыкорган", "Тараз", "Темиртау", "Уральск", "Усть-Каменогорск", "Экибастуз", "Шымкент"]
}
priceMap = {
    'A': [{'A': 1}, {'B': 2}, {'C': 3}, {'D': 4}, {'E': 5}],
    'B': [{'A': 2}, {'B': 1}, {'C': 2}, {'D': 3}, {'E': 5}],
    'C': [{'A': 3}, {'B': 2}, {'C': 1}, {'D': 2}, {'E': 5}],
    'D': [{'A': 4}, {'B': 3}, {'C': 2}, {'D': 1}, {'E': 5}],
    'E': [{'A': 5}, {'B': 5}, {'C': 5}, {'D': 5}]
}

priceTable = {
    "ziti": {
        "1": [{"min": 0,"max": 0.5,"value": 285},
{"min": 0.5,"max": 1,"value": 300},
{"min": 1,"max": 3,"value": 310},
{"min": 3,"max": 5,"value": 330},
{"min": 5,"max": 99999,"value": 330,"oneplus": 17.5}],
        "2": [{"min": 0,"max": 0.5,"value": 310},
{"min": 0.5,"max": 1,"value": 365},
{"min": 1,"max": 3,"value": 395},
{"min": 3,"max": 5,"value": 465},
{"min": 5,"max": 99999,"value": 465,"oneplus": 36.0}],
        "3": [{"min": 0,"max": 0.5,"value": 320},
{"min": 0.5,"max": 1,"value": 475},
{"min": 1,"max": 3,"value": 530},
{"min": 3,"max": 5,"value": 625},
{"min": 5,"max": 99999,"value": 625,"oneplus": 73.0}],
        "4": [{"min": 0,"max": 0.5,"value": 365},
{"min": 0.5,"max": 1,"value": 620},
{"min": 1,"max": 3,"value": 700},
{"min": 3,"max": 5,"value": 845},
{"min": 5,"max": 99999,"value": 845,"oneplus": 86.5}],
        "5": [{"min": 0,"max": 0.5,"value": 400},
{"min": 0.5,"max": 1,"value": 675},
{"min": 1,"max": 3,"value": 765},
{"min": 3,"max": 5,"value": 920},
{"min": 5,"max": 99999,"value": 920,"oneplus": 94.5}],
        "tongcheng": [{"min": 0,"max": 0.5,"value": 205},
{"min": 0.5,"max": 1,"value": 220},
{"min": 1,"max": 3,"value": 240},
{"min": 3,"max": 5,"value": 255},
{"min": 5,"max": 99999,"value": 255,"oneplus": 12.0}
        ]
    },
    "daomen": {
        "1": [{"min": 0,"max": 0.5,"value": 425},
{"min": 0.5,"max": 1,"value": 435},
{"min": 1,"max": 3,"value": 450},
{"min": 3,"max": 5,"value": 505},
{"min": 5,"max": 99999,"value": 0,"oneplus": 22.0}],
        "2": [{"min": 0,"max": 0.5,"value": 435},
{"min": 0.5,"max": 1,"value": 520},
{"min": 1,"max": 3,"value": 590},
{"min": 3,"max": 5,"value": 670},
{"min": 5,"max": 99999,"value": 670,"oneplus": 51.0}],
        "3": [{"min": 0,"max": 0.5,"value": 450},
{"min": 0.5,"max": 1,"value": 675},
{"min": 1,"max": 3,"value": 780},
{"min": 3,"max": 5,"value": 865},
{"min": 5,"max": 99999,"value": 865,"oneplus": 86.0}],
        "4": [{"min": 0,"max": 0.5,"value": 535},
{"min": 0.5,"max": 1,"value": 790},
{"min": 1,"max": 3,"value": 880},
{"min": 3,"max": 5,"value": 1040},
{"min": 5,"max": 99999,"value": 1040,"oneplus": 99.5}],
        "5": [{"min": 0,"max": 0.5,"value": 585},
{"min": 0.5,"max": 1,"value": 860},
{"min": 1,"max": 3,"value": 960},
{"min": 3,"max": 5,"value": 1135},
{"min": 5,"max": 99999,"value": 1135,"oneplus": 108.5}],
        "tongcheng": [{"min": 0,"max": 0.5,"value": 350},
{"min": 0.5,"max": 1,"value": 365},
{"min": 1,"max": 3,"value": 375},
{"min": 3,"max": 5,"value": 385},
{"min": 5,"max": 99999,"value": 385,"oneplus": 16.5}
        ]
    }
}
def get_zone(city):
    for zone, cities in areaMap.items():
        if city in cities:
            return zone
    return None
def get_price_table_id(zone_a, zone_b):
    price_table = priceMap.get(zone_a)
    if price_table is None:
        return None
    
    for item in price_table:
        if zone_b in item:
            return item[zone_b]
    return None

def cal(send,receive,weight,tp):
    a = get_zone(send)
    b = get_zone(receive)
    if a is None or b is None:
        price('无法识别城市')
        return None
    pid  = get_price_table_id(a,b)
    print(weight,a,b,pid,tp)
    print(priceTable[tp][str(pid)])
    price = []
    if tp in priceTable:
        price = priceTable[tp][str(pid)]
        if send==receive:
            price = priceTable[tp]['tongcheng']
    for p in price:
        value = 0
        value_cal = ''
        if weight>=p['min'] and weight<p['max']:
            if 'oneplus' in p:
                value = p['value'] + p['oneplus'] * math.ceil(weight - p['min'])
                value_cal ='计算过程：'+ str(p['value']) + ' + ' + str(p['oneplus']) + ' * ' + str(math.ceil(weight - p['min'])) + ' = ' + str(value)
            else:
                value = p['value']
                value_cal ='计算过程：'+ str(p['value'])
            return value,value_cal
    return None
print(cal("Москва","Алматы",23,'ziti'))